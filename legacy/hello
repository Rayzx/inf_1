import tkinter as tk
import math as math
import numpy as np
import copy

def newRotatePoint(point, orgin, degree):
    a = np.array([ [math.cos( degree / 360 * math.pi ), -1 * math.sin( degree / 360 * math.pi)], [math.sin( degree / 360 * math.pi), math.cos( degree / 360 * math.pi )], float])


class Object2D:
    def __init__(self, canv, x, y, dx = 0, dy = 0, da = 0, m = 1):
        self.state_arr = np.array([[x  , y ], # x y 
                                   [dx , dy], # dx dy 
                                   [da , m ]  # da m
                                           ], float )
        self.canv = canv
        self.c_Object
        pass
    
    def createObject(self, obj_type):
        self.c_Object = self.canv.createPolygon(self.state_arr[0][0]      , self.state_arr[0][1]      ,
                                                self.state_arr[0][0] + 100, self.state_arr[0][1]      ,
                                                self.state_arr[0][0] + 100, self.state_arr[0][1] + 100,
                                                self.state_arr[0][0]      , self.state_arr[0][1] + 100)

root = tk.Tk()
myCanvas = tk.Canvas( root, width = 1000, height = 1000, bg = 'white')

myCanvas.pack()

def CRotatePolygon(polygon):
    lCord = myCanvas.coords(polygon)
    print( "  {0}".format(lCord))
    n = len(lCord) / 2
    i = 0
    xeq = 0
    yeq = 0
    while i < n:
        xeq = xeq + lCord[2*i]
        yeq = yeq + lCord[2*i+1]
        i = i + 1
    xeq = xeq / n
    yeq = yeq / n
    i = 0
    blCord = copy.deepcopy(lCord)

    print( "  {0} {1}".format(blCord[0] - xeq,blCord[1] - yeq ))
    print( "  {0} {1}".format(blCord[2] - xeq,blCord[3] - yeq ))
    print( "  {0} {1}".format(blCord[4] - xeq,blCord[5] - yeq ))
    print( "  {0} {1}".format(blCord[6] - xeq,blCord[7] - yeq ))

    while i < n: 
        lCord[2*i] = (blCord[2*i] - xeq) * math.cos(3.1415926/4) - (blCord[2*i+1] - yeq) * math.sin(3.1415926/4) + xeq
        lCord[2*i+1] = (blCord[2*i] - xeq) * math.sin(3.1415926/4) + (blCord[2*i+1] - yeq) * math.cos(3.1415926/4) + yeq
        i = i + 1
        
    print( "  {0} {1}".format(xeq, yeq))
    myCanvas.coords(polygon, lCord)

def eventClick(event):
    myCanvas.itemconfig( myText, text = "{0}  {1}  ".format( event.x, event.y))
    CRotatePolygon(mySquare)


mySquare = myCanvas.create_polygon( 300, 300, 450, 300, 450, 450, 300, 450)
mySquare1 = myCanvas.create_polygon( -100, -100, -100, 100, 100, 100, 100, -100)

myText = myCanvas.create_text( 800, 100, text = "hello", font = "arial 40")


myCanvas.bind('<Button-1>', eventClick)

root.mainloop()
